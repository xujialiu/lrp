devtools::load_all()
?require
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
install.packages('tinytex')
tinytex::install_tinytex()
knit_with_parameters("~/R_packages/lrp/vignettes/my-vignette.Rmd")
devtools::document()
browseVignettes('ggplot2')
mtcars
devtools::document()
devtools::install()
devtools::document()
?devtools::build_vignettes
library(lr[])
library(lrp)
?packageStartupMessage
lrp::.onLoad
devtools::load_all()
devtools::load_all()
devtools::install()
devtools::install()
devtools::document()
devtools::document()
ggplot::ggproto_parent
ggplot2::ggproto_parent
mtcars
?dput
dput(mtcars)
x <- sample(1000)
x
?invisible
?devtools::use_data_raw
library(devtools)
use_data_raw
print('123,{x}')
?ui_todo
library(glue)
?glue
?diamonds
system.file("extdata", "2010.csv", package = "testdat")
devtools::use_data_raw()
use_data_raw()
?print
print
int_mod <- function(x, modulus) {
object <- x %% modulus
class(object) <- "int_mod"             # 设置类名
attr(object, "modulus") <- modulus    # 将模设为属性
object
}
# 定义一个泛型方法myprint
myprint(x, ...) UseMethod("myprint")
# 定义一个泛型方法myprint
myprint function(x, ...) UseMethod("myprint")
# 定义一个泛型方法myprint
myprint <- function(x, ...) UseMethod("myprint")
# 定义int_mod的myprint方法
myprint.int_mod <- function(int_mod_object){
integer <- as.numeric(int_mod_object)
modulus <- attr(int_mod_object, "modulus")
print(glue::glue("integer is {integer}, modulus is {modulus}"))
}
int_mod(10,4)
int_mod <- function(x, modulus) {
object <- x %% modulus
class(object) <- "int_mod"             # 设置类名
attr(object, "modulus") <- modulus    # 将模设为属性
return(object)
}
test_int_mod_obj <- int_mod(10,4)
myprint(test_int_mod_obj)
setClass("int_mod4", slots = c(integer = "integer", modulus = "integer"))
int_mod4(4L, 12L)
int_mod4 <- function(integer, modulus){
integer <- integer %% modulus
# 创建一个新的实例
new("int_mod4", integer = integer, modulus = modulus)
}
setClass("int_mod4", slots = c(integer = "integer", modulus = "integer"))
int_mod4 <- function(integer, modulus){
integer <- integer %% modulus
# 创建一个新的实例
new("int_mod4", integer = integer, modulus = modulus)
}
int_mod4 <- function(integer, modulus){
integer <- integer %% modulus
# 创建一个新的实例
new("int_mod4", integer = integer, modulus = modulus)
}
int_mod4(4L, 12L)
int_mod4(pi, 12L)
int_mod4 <- function(integer, modulus){
integer <- integer %% modulus
# 创建一个新的实例
new("int_mod4", integer = integer, modulus = modulus)
}
int_mod4(4L, 12L)
# 创建一个int_mod, 用于保存整数和模
#' @export
int_mod <- function(x, modulus) {
object <- list(integer = x %% modulus,
modulus = modulus)
class(object) <- "int_mod"             # 设置类名
return(object)
}
# 定义一个泛型方法myprint
#' @export
myprint(x, ...) UseMethod("myprint")
# 定义int_mod的myprint方法
#' @export
print.int_mod <- function(int_mod_object){
integer <- int_mod_object$integer
modulus <- int_mod_object$modulus
print(glue::glue("integer is {integer}, modulus is {modulus}"))
}
test_int_mod_obj <- int_mod(10,4)
test_int_mod_obj
# 创建一个int_mod, 用于保存整数和模
#' @export
int_mod <- function(x, modulus) {
object <- list(integer = x %% modulus,
modulus = modulus)
class(object) <- "int_mod"             # 设置类名
return(object)
}
# 定义一个泛型方法myprint
#' @export
myprint(x, ...) UseMethod("myprint")
# 定义int_mod的myprint方法
#' @export
print.int_mod <- function(int_mod_object){
integer <- int_mod_object$integer
modulus <- int_mod_object$modulus
print(glue::glue("integer is {integer}, modulus is {modulus}"))
}
# 定义一个泛型方法myprint
#' @export
myprint <- function (x, ...) UseMethod("myprint")
test_int_mod_obj <- int_mod(10,4)
test_int_mod_obj
# 定义int_mod的myprint方法
#' @export
myprint.int_mod <- function(int_mod_object){
integer <- int_mod_object$integer
modulus <- int_mod_object$modulus
print(glue::glue("integer is {integer}, modulus is {modulus}"))
}
# 创建一个int_mod, 用于保存整数和模
#' @export
int_mod <- function(x, modulus) {
object <- list(integer = x %% modulus,
modulus = modulus)
class(object) <- "int_mod"             # 设置类名
return(object)
}
# 定义一个泛型方法myprint
#' @export
myprint <- function (x, ...) UseMethod("myprint")
test_int_mod_obj <- int_mod(10,4)
test_int_mod_obj
citation("lubridate")
mtcars
x <- mtcars[1:10]
devtools::use_data(x, mtcars)
use_data(x, mtcars)
library(devtools)
use_data(x, mtcars)
load("~/R_packages/lrp/data/mtcars.rda")
View(mtcars)
use_data_raw()
?diamonds
?ggplot2::diamonds
use_data(x, internal = TRUE)
use_data(mtcars, internal = TRUE)
?list
list(ggplot2::diamonds, mtcars)
list('diamonds' = ggplot2::diamonds, mtcars)
devtools::check()
devtools::use_testthat()
library(devtools)
use_testthat()
test()
?test
?str_length
?expect_equal
library(testthat)
test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?context
devtools::test()
test_that("hello output should be Hello world! with x", {
expect_output(hello("xujialiu"), "Hello, world! xujialiu")
expect_output(hello(""), "Hello, world!")
}
)
expect_output(hello("xujialiu"), "Hello, world! xujialiu!")
?expect_match
?expect_equal_to_reference
expect_equal_to_reference
?expect_snapshot_value
my_data_analysis <- function() {
data.frame(
Column1 = 1:5,
Column2 = letters[1:5]
)
}
# 测试
testthat::test_that("my_data_analysis returns the expected data frame", {
result <- my_data_analysis()
testthat::expect_snapshot_value(result)
})
# 测试
testthat::test_that("my_data_analysis returns the expected data frame", {
result <- my_data_analysis()
testthat::expect_snapshot_value(result)
})
# 测试
testthat::test_that("my_data_analysis returns the expected data frame", {
testthat::expect_snapshot_value(result)
})
# 测试
testthat::test_that("my_data_analysis returns the expected data frame", {
testthat::expect_snapshot_value(result)
})
create_summary <- function(data) {
summary_df <- data.frame(
Mean = mean(data),
Median = median(data),
SD = sd(data)
)
return(summary_df)
}
# 测试数据
test_data <- 1:10
# 测试
testthat::test_that("create_summary returns the expected results", {
result <- create_summary(test_data)
testthat::expect_snapshot_value(result)
})
# 测试
testthat::test_that("create_summary returns the expected results", {
result <- create_summary(test_data)
testthat::expect_snapshot_value(result, style = "deparse")
})
# 测试
testthat::test_that("create_summary returns the expected results", {
result <- create_summary(test_data)
testthat::expect_snapshot_value(result, style = "deparse")
testthat::expect_snapshot_value(result, style = "deparse")
})
# 测试
testthat::test_that("create_summary returns the expected results", {
result <- create_summary(test_data)
testthat::expect_snapshot_value(result, style = "deparse")
})
test_data <- 1:10
# 测试
testthat::test_that("create_summary returns the expected results", {
result <- create_summary(test_data)
testthat::expect_snapshot_value(result, style = "deparse")
})
devtools::test()
.
.Last.value
devtools::test()
?expect_match
?expect_is
?expect_equal_to_reference
?expect_match
?expect_contains
?expect_setequal
expect_setequal
?expect_condition
?expect_equivalent
>skip
?skip
vignette("skipping")
?vignette
vignette("skipping")
library(lubridate)
library(tidyverse)
# 测试
testthat::test_that("create_summary returns the expected results", {
result <- create_summary(test_data)
testthat::expect_snapshot_value(result, style = "deparse")
testthat::expect_snapshot_value(result, style = "deparse")
})
expect_floor_equal <- function(unit, time) {
as_time <- function(x) as.POSIXct(x, tz = "UTC")
eval(bquote(expect_equal(floor_date(base, .(unit)), as_time(.(time)))))
}
test_that("floor_date works for different units", {
as_time <- function(x) as.POSIXct(x, tz = "UTC")
expect_floor_equal <- function(unit, time) {
eval(bquote(expect_equal(floor_date(base, .(unit)), as_time(.(time)))))
}
base <- as_time("2009-08-03 12:01:59.23")
expect_floor_equal("second", "2009-08-03 12:01:59")
expect_floor_equal("minute", "2009-08-03 12:01:00")
expect_floor_equal("hour",   "2009-08-03 12:00:00")
expect_floor_equal("day",    "2009-08-03 00:00:00")
expect_floor_equal("week",   "2009-08-02 00:00:00")
expect_floor_equal("month",  "2009-08-01 00:00:00")
expect_floor_equal("year",   "2009-01-01 00:00:00")
})
expect_floor_equal <- function(unit, time) {
as_time <- function(x) as.POSIXct(x, tz = "UTC")
# eval(bquote(expect_equal(floor_date(base, .(unit)), as_time(.(time)))))
floor_date(base, .(unit)) %>%  expect_equal(as_time(.(time))) %>% bquote() %>% eval()
}
expect_floor_equal("second", "2009-08-03 12:01:59")
expect_equal(floor_date(base, .(unit)), as_time(.(time))
)
library(palmerpenguins)
install.packages("palmerpenguins")
?ggthemes
install.packages("ggthemes")
library(penguins)
library(palmerpenguins)
?formatR::tidy_dir
formatR::tidy_file
?formatR::tidy_file
format::tidy_source
?formatR::tidy_source
formatR::tidy_app()
devtools::install_github("xujialiu/lrp")
