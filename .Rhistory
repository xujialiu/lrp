devtools::load_all()
?require
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
install.packages('tinytex')
tinytex::install_tinytex()
knit_with_parameters("~/R_packages/lrp/vignettes/my-vignette.Rmd")
devtools::document()
browseVignettes('ggplot2')
mtcars
devtools::document()
devtools::install()
devtools::document()
?devtools::build_vignettes
library(lr[])
library(lrp)
?packageStartupMessage
lrp::.onLoad
devtools::load_all()
devtools::load_all()
devtools::install()
devtools::install()
devtools::document()
devtools::document()
ggplot::ggproto_parent
ggplot2::ggproto_parent
mtcars
?dput
dput(mtcars)
x <- sample(1000)
x
?invisible
?devtools::use_data_raw
library(devtools)
use_data_raw
print('123,{x}')
?ui_todo
library(glue)
?glue
?diamonds
system.file("extdata", "2010.csv", package = "testdat")
devtools::use_data_raw()
use_data_raw()
?print
print
int_mod <- function(x, modulus) {
object <- x %% modulus
class(object) <- "int_mod"             # 设置类名
attr(object, "modulus") <- modulus    # 将模设为属性
object
}
# 定义一个泛型方法myprint
myprint(x, ...) UseMethod("myprint")
# 定义一个泛型方法myprint
myprint function(x, ...) UseMethod("myprint")
# 定义一个泛型方法myprint
myprint <- function(x, ...) UseMethod("myprint")
# 定义int_mod的myprint方法
myprint.int_mod <- function(int_mod_object){
integer <- as.numeric(int_mod_object)
modulus <- attr(int_mod_object, "modulus")
print(glue::glue("integer is {integer}, modulus is {modulus}"))
}
int_mod(10,4)
int_mod <- function(x, modulus) {
object <- x %% modulus
class(object) <- "int_mod"             # 设置类名
attr(object, "modulus") <- modulus    # 将模设为属性
return(object)
}
test_int_mod_obj <- int_mod(10,4)
myprint(test_int_mod_obj)
setClass("int_mod4", slots = c(integer = "integer", modulus = "integer"))
int_mod4(4L, 12L)
int_mod4 <- function(integer, modulus){
integer <- integer %% modulus
# 创建一个新的实例
new("int_mod4", integer = integer, modulus = modulus)
}
setClass("int_mod4", slots = c(integer = "integer", modulus = "integer"))
int_mod4 <- function(integer, modulus){
integer <- integer %% modulus
# 创建一个新的实例
new("int_mod4", integer = integer, modulus = modulus)
}
int_mod4 <- function(integer, modulus){
integer <- integer %% modulus
# 创建一个新的实例
new("int_mod4", integer = integer, modulus = modulus)
}
int_mod4(4L, 12L)
int_mod4(pi, 12L)
int_mod4 <- function(integer, modulus){
integer <- integer %% modulus
# 创建一个新的实例
new("int_mod4", integer = integer, modulus = modulus)
}
int_mod4(4L, 12L)
# 创建一个int_mod, 用于保存整数和模
#' @export
int_mod <- function(x, modulus) {
object <- list(integer = x %% modulus,
modulus = modulus)
class(object) <- "int_mod"             # 设置类名
return(object)
}
# 定义一个泛型方法myprint
#' @export
myprint(x, ...) UseMethod("myprint")
# 定义int_mod的myprint方法
#' @export
print.int_mod <- function(int_mod_object){
integer <- int_mod_object$integer
modulus <- int_mod_object$modulus
print(glue::glue("integer is {integer}, modulus is {modulus}"))
}
test_int_mod_obj <- int_mod(10,4)
test_int_mod_obj
# 创建一个int_mod, 用于保存整数和模
#' @export
int_mod <- function(x, modulus) {
object <- list(integer = x %% modulus,
modulus = modulus)
class(object) <- "int_mod"             # 设置类名
return(object)
}
# 定义一个泛型方法myprint
#' @export
myprint(x, ...) UseMethod("myprint")
# 定义int_mod的myprint方法
#' @export
print.int_mod <- function(int_mod_object){
integer <- int_mod_object$integer
modulus <- int_mod_object$modulus
print(glue::glue("integer is {integer}, modulus is {modulus}"))
}
# 定义一个泛型方法myprint
#' @export
myprint <- function (x, ...) UseMethod("myprint")
test_int_mod_obj <- int_mod(10,4)
test_int_mod_obj
# 定义int_mod的myprint方法
#' @export
myprint.int_mod <- function(int_mod_object){
integer <- int_mod_object$integer
modulus <- int_mod_object$modulus
print(glue::glue("integer is {integer}, modulus is {modulus}"))
}
# 创建一个int_mod, 用于保存整数和模
#' @export
int_mod <- function(x, modulus) {
object <- list(integer = x %% modulus,
modulus = modulus)
class(object) <- "int_mod"             # 设置类名
return(object)
}
# 定义一个泛型方法myprint
#' @export
myprint <- function (x, ...) UseMethod("myprint")
test_int_mod_obj <- int_mod(10,4)
test_int_mod_obj
citation("lubridate")
mtcars
x <- mtcars[1:10]
devtools::use_data(x, mtcars)
use_data(x, mtcars)
library(devtools)
use_data(x, mtcars)
load("~/R_packages/lrp/data/mtcars.rda")
View(mtcars)
use_data_raw()
?diamonds
?ggplot2::diamonds
use_data(x, internal = TRUE)
use_data(mtcars, internal = TRUE)
?list
list(ggplot2::diamonds, mtcars)
list('diamonds' = ggplot2::diamonds, mtcars)
